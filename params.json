{"name":"String-gzip-utilities","tagline":"Simple Exampple String Wrapper and GZip Message Converter","body":"# String-Gzip-Utilities\r\nSome simple Java String Wrappers for examples and a message converter that can be used to gzip and gunzip message contents.\r\n\r\n##Pre-requisites\r\nJava JDK 1.7\r\n\r\n\r\n###Soasta Custom Scripting Module API\r\n* cloudtest-plugin-api.jar \r\n* cloudtest-scripting-environment.jar \r\n\r\n\r\n```javascript\r\n//String Functions Without Wrapper\r\nvar str = new java.lang.String(\"Hello World\");\r\n$context.result.postMessage($context.result.LEVEL_INFO, \"str before: \" + str);\r\nstr = str.replaceAll(\"l\",\"LL\");\r\n$context.result.postMessage($context.result.LEVEL_INFO, \"str after: \" + str);\r\nstr = str.toLowerCase()\r\n$context.result.postMessage($context.result.LEVEL_INFO, \"str after: \" + str);\r\n```\r\nUsing a wrapper you can have more control over inputs and outputs and error handling within CloudTest.  In the example with the string the only reason you can do this is because the package is imported by default.\r\n\r\n```javascript\r\n//String Functions With Wrapper.  StringBuilder and String Types are both wrapped\r\nimportPackage(org.soasta.helper);\r\n\r\nvar StringBuilder = new StringBuilderHelper($context.createJavaEnvironment(),\"Hello\");\r\n\r\nStringBuilder.Append(\" World\");\r\n$context.result.postMessage($context.result.LEVEL_INFO, StringBuilder.ToString());\r\n\r\nvar length = StringBuilder.Length();\r\n$context.result.postMessage($context.result.LEVEL_INFO, length);\r\n\r\nvar reverse = StringBuilder.Reverse();\r\n$context.result.postMessage($context.result.LEVEL_INFO, reverse);\r\n\r\nvar StringHelper = new JavaStringHelper($context.createJavaEnvironment(),StringBuilder.Reverse());\r\nvar equalsString = StringHelper.EqualsIgnoreCase(\"DLROW OLLEH\");\r\n$context.result.postMessage($context.result.LEVEL_INFO, equalsString);\r\n\r\nvar matchesString = StringHelper.Matches(\"(?i:.*OLLEH.*)\");\r\n$context.result.postMessage($context.result.LEVEL_INFO, matchesString);\r\n\r\nStringHelper.Replace(\"World\", \"SOASTA\")\r\n$context.result.postMessage($context.result.LEVEL_INFO, StringHelper.Value());\r\n\r\nStringHelper.ToLowerCase();\r\n$context.result.postMessage($context.result.LEVEL_INFO, StringHelper.Value());\r\n```\r\nFor message conversion the class name \"GzipConverter\" would be entered as the module name for binary conversion for the target.  Then all messages for that target would have the compress and decompress methods invoked during processing.\r\n\r\n```javascript\r\npublic final class GzipConverter implements MessageConverter {\r\n\r\n\tpublic static byte[] compress(String string) throws IOException {\r\n\t    ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());\r\n\t    GZIPOutputStream gos = new GZIPOutputStream(os);\r\n\t    gos.write(string.getBytes());\r\n\t    gos.close();\r\n\t    byte[] compressed = os.toByteArray();\r\n\t    os.close();\r\n\t    return compressed;\r\n\t}\r\n\r\n\tpublic static String decompress(byte[] compressed) throws IOException {\r\n\t    final int BUFFER_SIZE = 32;\r\n\t    ByteArrayInputStream is = new ByteArrayInputStream(compressed);\r\n\t    GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);\r\n\t    StringBuilder string = new StringBuilder();\r\n\t    byte[] data = new byte[BUFFER_SIZE];\r\n\t    int bytesRead;\r\n\t    while ((bytesRead = gis.read(data)) != -1) {\r\n\t        string.append(new String(data, 0, bytesRead));\r\n\t    }\r\n\t    gis.close();\r\n\t    is.close();\r\n\t    return string.toString();\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic String deserializeResponse(byte[] resp) throws Exception {\r\n\t\treturn decompress(resp);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic byte[] serializeRequest(String req) throws Exception {\r\n\t\treturn compress(req);\r\n\t}\r\n\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}